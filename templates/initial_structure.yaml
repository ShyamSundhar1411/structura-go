- name: main.go
  directory: "app"
  description: "A Sample Broiler Plate for main.go"
  content: |
    package main

    import "fmt"

    func main() {
      fmt.Println("Hello, World!")
    }

- name: .env
  directory: "app"
  description: "A Sample Env file"
  content: |
    # .env file sample

    DB_HOST=localhost
    DB_PORT=5432
    DB_USER=username
    DB_PASSWORD=password
    DB_NAME=mydatabase

    # API keys
    API_KEY=your_api_key_here
    SECRET_KEY=your_secret_key_here

    # Application settings
    DEBUG=true
    LOG_LEVEL=info

    # Email service configuration
    SMTP_HOST=smtp.example.com
    SMTP_PORT=587
    SMTP_USER=email@example.com
    SMTP_PASSWORD=emailpassword

    # External service URLs
    REDIS_URL=redis://localhost:6379
    CACHE_TIMEOUT=300

- name: readme.MD
  description: "A sample README file"
  directory: "root"
  content: |
    # Project Name

    ## Overview
    This project is generated using structura. It includes essential files to kickstart development.

    ## Usage
    Run the project using:

    ```sh
    go run <project_name>/main.go
    ```

    ## Project Structure
    ```
    /your-project/
    ├── app/
    │   ├── main.go
    ├── .env
    ├── readme.MD
    ```

    ## Environment Variables
    The `.env` file contains environment variables:

    ```env
    DB_HOST=localhost
    DB_PORT=5432
    DB_USER=username
    DB_PASSWORD=password
    DB_NAME=mydatabase
    ```

    ## Contributing
    Contributions are welcome! Please submit a PR or create an issue.

- name: .gitignore
  description: "A .gitignore file for Go projects"
  directory: "root"
  content: |
    # Binaries
    *.exe
    *.dll
    *.so
    *.dylib
    .env
    # Build artifacts
    /bin/
    /obj/
    /pkg/

    # Go vendor
    /vendor/

    # IDE/editor config files
    .vscode/
    .idea/
    *.swp
    *~

    # Dependency files
    go.sum
    go.work.sum

    # Logs and temp files
    *.log
    *.out
    /tmp/

    # Executables
    main
    *.test
- name: env.go
  description: "A sample env.go file"
  directory: "app"
  content: |
    package main
    import (
        "log"

        "github.com/spf13/viper"
      )
    type Env struct {
      DBHost     string `mapstructure:"DB_HOST"`
      DBPort     int    `mapstructure:"DB_PORT"`
      DBUser     string `mapstructure:"DB_USER"`
      DBPassword string `mapstructure:"DB_PASSWORD"`
      DBName     string `mapstructure:"DB_NAME"`

      APIKey    string `mapstructure:"API_KEY"`
      SecretKey string `mapstructure:"SECRET_KEY"`

      Debug     bool   `mapstructure:"DEBUG"`
      LogLevel  string `mapstructure:"LOG_LEVEL"`

      SMTPHost  string `mapstructure:"SMTP_HOST"`
      SMTPPort  int    `mapstructure:"SMTP_PORT"`
      SMTPUser  string `mapstructure:"SMTP_USER"`
      SMTPPass  string `mapstructure:"SMTP_PASSWORD"`

      RedisURL     string `mapstructure:"REDIS_URL"`
      CacheTimeout int    `mapstructure:"CACHE_TIMEOUT"`
    }
    func NewEnv() *Env {
      env := Env{}
      viper.SetConfigFile(".env")
      err := viper.ReadInConfig()
      if err != nil {
        log.Fatal("Unable to load environment file :", err)
      }
      err = viper.Unmarshal(&env)
      if err != nil {
        log.Fatal("Unable to decode into struct :", err)
      }
      if env.AppEnv == "development" {
        log.Println("The App is running in development env")
      }
      return &env
    }
  

